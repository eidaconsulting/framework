21/01/2019
---------------------------------------
Ajout des balises og: de facebook et de twitter pour ameliorer le reférencement et
surtout pour que lors des partages la présentation soit bien faites.

Les varibles suivants sont créer ou prise en compte.
- $og_type : Prend par defaut 'website' mais peut prendre aussi les valeurs
comme 'produit', 'livre', 'endroit', 'profil', et 'video.movie'
- $page_titre : Etait deja pris en compte par le systeme. Prends en compte le
titre de la page. Valeur par defaut 'app_slogan' dans le fichier config
- $description : Existe egalement déjà et est prise ne compte. Valeur par
defaut 'app_description' dans le fichier config
- $og_picture : Prend en compte l'image a afficher en miniature lors des
partage de la page sur les reseaux sociaux. Pour ca il faut creer une
image par defaut dans le dossier image du site avec le nom 'og_picture.jpg'.
L'image defaut doit avoir le format mininum 1200X630

Toutes ses informations peuvent etre specifiées par page dans le controller
de chaque page ensuite etre transmis à l'aide de compass qui se trouve au
nivea du 'render'.

Les autres informations og: sont pour le moment statique.
Il s'agis de :
- og:locale qui est sur fr_FR
- og:url qui est le lien de la page

2 --------------
.Ajouter de code pour le réferencement YANDEX dans le fichier config.
.Configuration de sont affichage automatiquement dans l'entete des qu'on ajoute son code dans le fichier
config.
Ce code contribue à la validation du site par Yandex afin d'optimiser le référencement

24/01/2019
--------------------------------
- Optimisation du fichier head.php
Remplacement des App/App::getInstance()-> par $this->entity()->
Optimisation des lignes description et title


05/02/2019
--------------------------------
MODULE BLOG

- Factorisation de la barre de recherche.
Il a été créer dans le dossier Views/publics/includes le fichier searchBarre.php
qui contient la barre de recherche qu'on a inclut dans la barre laterale.

- Ajout du systeme de newsletters pour le blog
Creation du fichier Views/publics/includes/newsletters.php
Creation du controllers Newsletters et traitement du formulaire
Creation de NewsletterTable et NewsletterEntity
Creation au niveau de la base de données de la table "eida_blognewsletters" dont voici laz structuration

CREATE TABLE `eida_blognewsletters` (
  `id` int(11) NOT NULL,
  `email` varchar(255) DEFAULT NULL,
  `ip` varchar(255) DEFAULT NULL,
  `add_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

ALTER TABLE `eida_blognewsletters`
  ADD PRIMARY KEY (`id`);

ALTER TABLE `eida_blognewsletters`
    MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;COMMIT;



12/02/2019
======================================================
Ajout de code de selection de l'image de partage pour la page blog single
$og_picture = $this->entity()->uploads('publication/'.$data->image);


17/02/2019
======================================================
Optimisation de l'ensemble du code
- Fusion des fichier type-create et type-edit en un seul fichier type-form qui est utiliser pour
ajouter et pour modifier de l'information. Puisque pour la plupart des formulaires d'ajout au
niveau de l'espace privé les formulaire d'ajout et le formulaires de modification sont les meme.
Il faut juste préciser pour chacune des action dans la methode le type d'action avec la variable
$action (Ajouter/Modifier)

22/02/2019
----------------------------
Changement de place pour les alertes. MAintenant ils s'affichent en haut au centre. Plus visible.

16/03/2019
-----------------------------
Ajout du parametre "class" au chekbox et au bouton radio dans le ficier Core/Form/Form.phph

21/03/2019
---------------------
* Correction de join() en MyJoin() au niveau du controller Admins/UsersController ligne 35

* Changement de $admins en $datas dans le fichier admins/views/users.php ligne 30

22/03/2019
--------------------
* Page contact : Precision au niveau de celui qui envoie le message. Pour permettre lors de
la reception du message de pouvoir repondre en cliquant sur "repondre"


05/05/2019
----------------------
Correction des failles de sécurité

* Correction de la faille XSS
Desormais il faut pour extraire les variables $_POST avec extract, il faut utiliser extract($this->secureData($_POST))
au lieu de extract($_POST)

=============
V2
=============

02/06/2019
------------------
Desormais pour appeler les url depuis la classe entity on est plus obligé de préciser la page
Si on ne precise pas la page l'URL pointe vers la page index du type d'utilisateur
$this->entity()->admins() va pointer vers la page d'accueil de l'admin

Entity ligne 208

06/08/2019
------------------
Modification du fichier Panier dans la dossier Core/E-commerce. Ajout de la methode "showProduct"
qui permet de selectionner et afficher les produits ajoutés au Panier.

Pour initialiser la class "Panier" on peut préciser la table qui comporte les produits.
Par defaut c'est la table "Product" qui est prise en compte.



=============
V3
=============


15/10/2019
---------------------
*Modification de la ligne 88 de la class PHP "Form" if($id === "summernote") est changé en if($class === "summernote")

Desormais pour utiliser summernote il faut appliquer au textarea la class .summernote au lieu de l'ID.
Donc pour avoir plusieurs summernote sur une page, faut juste appliquer la class .summernote a tous
ces champs.


* Suppression de <?php session_destroy(); ?> du fichier _header.php
Cela supprimait les sessions a chaque actualisation de la page.


19/10/2019
----------------------
* Meilleure gestion de l'image avec summernote
Maintenant summernote n'integre plus les images au format base64. Il enregiste l'image dans le
fichier upload et envoie le lien vers summernote. Moins louds et plus pratique.

Les fichiers modifier :
- mysummernote : Optimisation des outils de summernote, ajout du parametre "callbacks" et ajout de
la fonction "uploadImageContent" qui lance le fichier ajax pour traiter l'image. Pour un nouveau
projet, il faut changer le lien au niveau de "URL" de la fonction "uploadImageContent".

- summernotes.php : Ajout de ce fichier au niveau du dossier "public/assets/ajax". Il est le fichier
appeler pour traiter l'image et l'enregistrer au niveau du dossier "public/uploads/summernotes".
Au cas ou il y a d'erreur, il faut verifier si ce dossier existe.

26/10/2019
-------------------------------------------
Modification de copyright, affichage du nom de l'entreprise après l'année de réalisation.
Le code du copyright est désormais le suivant :
<?= date('Y') ?> &copy; <?= strtoupper($this->entity()->app_info('company_name')); ?>.


27/10/2019
--------------------------------
* Fichier Config
Ajout de l'option "bing-code" qui permet de mettre le code d'identification de bing pour le
référencement. Il suffit de renseigner le code de bing et le code apparait dans l'entete.

* Fichier Head
Pour afficher le code d'identification de Bing en haut, il a été ajouté le code suivant :
<?php if($this->entity()->app_info('bing-code') != ''): ?>
    <meta name="msvalidate.01" content="<?= $this->entity()->app_info('bing-code'); ?>" />
<?php endif; ?>

- L'action ci-dessus est egalement fait pour google.


29/10/2019
--------------------------

10/12/2019
-------------------
Fichier Upload : Modifier de controles. Desormais s'il y a redimentionnement d'image et
que la taille (dimension) de l'image qui est chargée est inféfieure a la taille du
redimentionnement le systeme envoie une erreur pour demander de charger une image de taille
plus grandes.

24/12/2019
--------------------------
+ Pagination
Amelioration du systeme : Maintenant pour la pagination on procede de la maniere suivantes :
1. On defini la route qui pointe vers la methode view par defaut.
    $router->get('/boutiques/page/:page', 'Publics#boutiques');

2. On recuperer la variable page depuis la methode tout en prenant soin de l'initialiser à 0
pour éviter des erreurs au moment de l'affichage de la page.
     public function view($page = 0){
            $styleCSS = $this->css();
            ...

3. Dans l'initisation de la classe Pagination, on ajoute un 4eme parametre qui est la $page
    $nb_vue = 24;
            $pagination = Pagination::getInstance()->pagination($nb_vue, 'Shop', ['status' => 1], $page);
            $currentPage = $pagination['currentPage'];
            $nb_page = $pagination['nb_page'];
            $firstOfListe = ($currentPage - 1) * $nb_vue;

4. On passe alors les variables $nb_page et $currentPage a la vue

5. On utilise les variables $firstOfListe et $nb_page comme paramettre limite de la requete.
    $datas = $this->Shop->DefMyLim($firstOfListe, $nb_vue);

6. On met le code suivant à l'emplacement où on veux faire apparaitre la pagination.
    <div class="row mt-3">
                        <?= Core\Pagination\Pagination::getInstance()
                                                      ->paginationView($currentPage, $nb_page, '/boutiques')?>
                    </div>

7. On remplace "/boutiques" par le lien qui mene vers votre page.