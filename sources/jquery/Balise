==========================================================
SELECTION D'ELEMENT ======================================
==========================================================
$('a').length retourne le nombre de liens hypertextes contenus dans la page.
$('a')[0] retourne le premier lien hypertexte de la page.

['nom*="valeur"'] = Éléments qui possèdent un attribut nom qui contient (partiellement ou totalement) la valeur spécifiée.
['nom~="valeur"'] = Éléments qui possèdent un attribut nom qui contient la valeur spécifiée, délimité par des espaces.
['nom$="valeur"'] = Éléments qui possèdent un attribut nom qui se termine par la valeur spécifiée.
['nom!="valeur"'] = Éléments qui ne possèdent pas l'attribut nom, ou qui possèdent un attribut nom différent de la valeur spécifiée.
['nom^="valeur"'] = Éléments qui possèdent un attribut nom qui commence par la valeur spécifiée.


/* ===== SELECTEUR HIERACHIQUE ========*/
('p > e') = Éléments e directement descendants d'éléments p
('p + e') = Éléments e directement précédés d'un élément p
('p ~ e') = Éléments e précédés d'un élément p
:empty = Éléments qui n'ont pas d'enfant
:first-child = Premier enfant
:first = Premier élément
:last-child = Dernier enfant
:last = Le dernier élément de la sélection
:nth-child() = Élément qui est l'énième enfant de son parent
:only-child = Éléments qui sont enfants uniques de leur parent

/* ===== PSEUDO SELECTEUR D'ELEMENT SELECTIONNE ========*/
:even = Éléments pairs
:odd = Éléments impairs
:eq() = Élément dont l'index est spécifié
:gt() = Éléments dont l'index est supérieur à (greater than) l'index spécifié
:lt() = Éléments dont l'index est inférieur à (lower than) l'index spécifié

EX:---------
$('p:even') = Éléments p pairs
$('p:odd') = Éléments p impairs
$('p:gt(1)') = Éléments p après le deuxième
$('p:eq(3)') = Élément p d'index 4
$('p:lt(3)') = Éléments p avant le quatrième


/* ===== SELECTEUR D'ELEMENTS PARTICULIERS ========*/
:header = Tous les titres <h1>à<h6>
:hidden = Éléments cachés
:visible = Éléments visibles
:not() = Éléments qui ne correspondent pas au sélecteur spécifié

EX:----------------------
$(':header:not(h1)').hide(); = Toutes les balises de titre sont cachées, à l'exception de la balise <h1>.


/* ===== PSEUDO SELECTEURS DE FORMULAIRE ========*/
:input = Tous les éléments de typeinput, textarea, select et button
:button = Éléments de type button
:checkbox = Éléments de type checkbox
:checked = Éléments qui sont cochés
:radio = Éléments de type radio
:reset = Éléments de type reset
:image = Tous les boutons de type image
:submit = Éléments de type submit
:text = Éléments de type text
:password = Éléments de type password
:selected = Éléments sélectionnés
:focus = Sélectionne l'élément s'il a le focus
:enabled = Éléments validés


/* ===== SELECTEURS UTILISER DANS LES TABLEAUX ========*/
:first = Premier élément
:last = Dernier élément
:eq() = Élément dont l'index est spécifié
:gt() = Éléments dont l'index est supérieur à l'index spécifié
:lt() = Éléments dont l'index est inférieur à l'index spécifié
:even = Éléments d'index pair
:odd = Éléments d'index impair
:empty = Éléments qui n'ont pas d'enfant
:not() = Éléments qui ne correspondent pas au sélecteur spécifié

EX:-----------------------------
Coloration de la première cellule = $('td:first')
Coloration de la dernière ligne = $('tr:last')
Coloration des cellules vides = $(':empty')
Coloration des lignes paires = $('tr:even')
Coloration des cellules paires = $('td:even')
Coloration des lignes d'index supérieur à 2 = $('tr:gt(1)')
Coloration des lignes d'index supérieur à 1, et, dans le sous-ensemble correspondant, des lignes d'index inférieur à 5 = $('tr:gt(0):lt(4)')
Coloration des cellules d'index supérieur à 5, et, dans le sous-ensemble correspondant, des cellules d'index inférieur à 11 = $('td:gt(4):lt(10)')
Coloration de toutes les lignes à l'exception de la dernière = $('tr:not(tr:last)')

/* ===== PARCOURIR UN ELEMENT ========*/
$('img').each(function(index){
  //Une ou plusieurs instructions JavaScript
  this.src = 'images2/i' + (index+1) + '.jpg';
});


Conversion d'une variable JavaScript en un objet jQuery
------------------------------------------------------------------
var variableJS = 'un simple texte';
var variableJQ = $(variableJS);

Conversion d'un objet jQuery en un élément du DOM
--------------------------------------------------------
var spans = $('span').get();


==========================================================
MODIFICATION D'ELEMENT ===================================
==========================================================

/* ===== SELECTEURS UTILISER DANS LES TABLEAUX ========*/
Le getters exemple $('a').css('with') : Va retourner la valeurs du with
Le setters exemple $('a').css('with','100px') : Attribue la valeurs 100px au "with" existant, si sa n'existe pas alors il est creer.

$('a').attr('href') = Lire l'attribut href

SETTER
----------
$('#logo').attr('src','logo.gif'); //affecter la valeur logo.gif à l'attribut
$('#logo').attr({src: 'logo.gif', alt: 'Logo de la société', width: '200px'}); //Affecter plusieurs attributs
$('a').attr('target', function() {
  if(this.host == location.host) return '_self'
  else return '_blank'
}); //Changer l'attribut target en fonction du lien


/* ===== ACCEDER AU ATTRIBUT HTML ET AUX PROPRIETES CSS ========*/
Accéder aux ttributs
------------------------------
$('sel').attr('attribut') = Afficher la valeur d'un atttribut
$('sel').attr('attribut','valeur') = Modifier ou Creer l'attribut avec la valeur donnée
$(sel).removeAttr('attribut'); = SUPPRIMER UN ATTRIBUT

Accéder aux propriétés CSS
----------------------------------------
$('sel').css('attribut') = Afficher la valeur de la propriété CSS
$('sel').css('attribut','valeur') = Creer ou modifier la propriété CSS designée avec la valeur donnée

Ajouter ou supprimer une class CSS
----------------------------------------------
addClass() = ajoute une classe dans les éléments sélectionnés ;
removeClass() = supprime (si elle existe) une classe des éléments sélectionnés ;
toggleClass() = accomplit deux actions : si la classe spécifiée n'existe pas dans les éléments sélectionnés, elle y est ajoutée. Si elle existe, elle est supprimée.

EX:---------------------
$('#julia').addClass('vert grand');
$('#eric').removeClass('vert').addClass('rouge');
$('#paul').toggleClass('vert').toggleClass('rouge').toggleClass('grand').toggleClass('petit');
$('#pierre').removeClass('vert grand').addClass('rouge petit');

Tester l'existence de classes
--------------------------------------------
hasClass() = Permet de verifier si une selection est d'une class ou pas
is() = Permet de verifier si plusieurs selection sont d'une class ou pas

Ex1:-------------------
if ($('#jean').hasClass('rouge'))
  alert('le span #jean est de classe rouge');
else
  alert('le span #jean n\'est pas de classe rouge');

Ex2:-------------------
if ($('#jean').is('.grand.rouge'))
  alert('le span #jean est de classe rouge');
else
  alert('le span #jean n\'est pas de classe rouge');


/* ===== TRAVAILLER AVEC LES FORMULAIRES ========*/

$('#champ').val() = Lit l'information dans le champ selectionné.
$(':radio#H:checked').val() = Lit l'état du bouton radio H. Renvoie true si le bouton est sélectionné, sinon false.
$('#champ').val('Michel') = Écrit « Michel » dans le champs sélectionner ou sélectionne le champs "Michel dans "
$(':radio').val(['H']); = Sélectionne le bouton radio H.


/* ===== TRAVAILLER AVEC LES VALEURS STOCKEES DANS LES ELEMENTS ========*/

text() =  retourne/modifie la valeur textuelle stockée dans l'élément ;
html() =  retourne/modifie le code HTML stocké dans l'élément.


/* ===== POSITION ET TAILLE ========*/

offset() : position absolue d'un élément dans la page (getter et setter) ;
position() : position relative d'un élément dans son parent (getter seulement).

CONNAITRE LA POSITION
-------------------------------
offset().left et offset().top pour connaître la position absolue d'un élément.
position().left et position().top pour connaître la position d'un élément dans son parent

MODIFIER LA POSITION DES ELEMENTS
-------------------------------------------

EX:----------------------
var posenfant = $('#enfant').offset();
posenfant.top = 100; //Definition des tailles
posenfant.left = 100; //Definition des tailles
$('#enfant').offset(posenfant);  //Configuration des tailles


CONNAITRE LES DIMENSIONS DES ELEMENTS
----------------------------------------------------------
width() = width
innerWidth() = width + padding gauche + padding droit
outerWidth() = width + padding gauche + padding droit + border gauche + border droit
outerWidth(true) = width + padding gauche + padding droit + border gauche + border droit + margin gauche + margin droit
height() = height
innerHeight() = height + padding supérieur + padding inférieur
outerHeight() = height + padding supérieur + padding inférieur + border supérieur + border inférieur
outerHeight(true) = height + padding supérieur + padding inférieur + border supérieur + border inférieur + margin supérieur + margin inférieur


/* ===== ASSOCIER DES DONNEES  AUX BALISES ========*/

$.data(element, 'variable', nom_donnees: donnees);
$.data(element, 'variable', {nom_donnees1: donnees1, nom_donnees2: donnees2, nom_donnees3: donnees3, etc.});
ou
element = est le nom de l'élément concerné, sans apostrophes ;
variable = est le nom (entre apostrophes) de la « variable » dans laquelle sera stockée la donnée ;
nom_donnees = est le nom (sans apostrophes) associé à la donnée ;
donnees = est une donnée quelconque. S'il s'agit d'un nombre, les apostrophes sont inutiles. Par contre, s'il s'agit d'une chaîne, mettez-la entre apostrophes.

RETROUVER UNE DONNEE ASSOCIEE A UN ELEMENT
------------------------------------------------------
var uneVariable = $.data(element,'variable').nom_donnees;

$.removeData(element,'variable');

EX:-------------------------------------------

var div = $('div')[0];
$.data(div, 'mesValeurs', {premier: 'bonjour', deuxieme: 12, troisieme: 'http://www.siteduzero.com'});
var val1 = $.data(div, 'mesValeurs').premier;
var val2 = $.data(div, 'mesValeurs').deuxieme;
var val3 = $.data(div, 'mesValeurs').troisieme;
$('#sp1').text(val1);
$('#sp2').text(val2);
$('#sp3').text(val3);



==========================================================
INSERER ET REMPLACER DES ELEMENTS DANS LE DOM ============
==========================================================

INSERER DU CONTENU
---------------------------
append() = insère du contenu à la fin de la sélection ;
prepend() = insère du contenu au début de la sélection ;
before() = insère du contenu avant la sélection ;
after() = insère du contenu après la sélection.

Ex:------------------
$('h2').append(' ***'); Ajout d'une espace et de trois astérisques à la suite de chaque titre <h2>

REMPLACER DES ELEMENTS
-------------------------------
replaceWith()

EX:-----------------
$('hr').replaceWith('<br>'); Remplacer la balise hr par la balise br

$('h2').each(function(){
  var elemH2 = $(this);
  elemH2.replaceWith('<h3>' + elemH2.text() + '</h3>');
});
//Remplacer les element h2 par h3

INSERER DES ELEMENTS
----------------------------------
eai.appendTo(cible) = insère un élément à la fin de la cible ;
eai.prependTo(cible) = insère un élément au début de la cible ;
eai.insertBefore(cible) = insère un élément avant la cible ;
eai.insertAfter(cible) = insère un élément après la cible.

appendTo() insère un élément à la fin de la cible, tout en restant à l'intérieur de cette dernière, alors que
insertAfter() insère un élément après la cible.
D'une manière identique, prependTo() insère un élément au début de la cible tout en restant à l'intérieur de cette dernière,
alors que insertBefore() insère un élément avant la cible.


DEPLACER DU CONTENU
---------------------------------------------
$('sel').append(depl);
$('sel').prepend(depl);
$('sel').before(depl);
$('sel').after(depl);

… où sel sélectionne l'élément avant ou après lequel doit se faire le déplacement et depl
représente l'élément à déplacer.

Les méthodes append() et after() sont comparables : elles déplacent toutes deux un élément après un autre élément. Mais
attention, avec append() le déplacement se fait avant la balise de fin de l'élément sélectionné, alors qu'avec after() elle se
fait après cette balise.

Les méthodes prepend() et before() sont également comparables : elles déplacent toutes deux un élément avant un autre
élément. Mais attention, avec prepend() le déplacement se fait après la balise de début de l'élément sélectionné, alors qu'avec
before() elle se fait avant cette balise.


DUPLIQUER DES ELEMENTS
-----------------------------------
clone() à un sélecteur et, selon l'effet recherché, vous la ferez suivre de la méthode
appendTo(), prependTo(), insertBefore() ou insertAfter().

Ex:---------------
$('#deux').clone().insertBefore($('#un'));


ENTOURER DES ELEMENTS
-------------------------------
$('sel').wrap('elwrap');

… où sel est un sélecteur jQuery quelconque et elwrap représente le ou les éléments (ouvrants et fermants) à insérer autour
de la sélection. Ces éléments peuvent être du code HTML, un sélecteur, un élément jQuery ou un élément du DOM. Quelle que
soit leur nature, ils encadrent les éléments à entourer.

Ex:-------------------
$('li').wrap('<i></i>');
$('li').wrap('<font color="red"><b><i><u></u></i></b></font>'); Affiche les élements en rouge, gras,
italique et souligner

La méthode wrap() a deux variantes :
 - wrapInner(), pour entourer le contenu d'un élément par un autre élément créé à la volée ;
 - wrapAll(), pour entourer d'une façon globale les éléments sélectionnés avec un autre élément créé à la volée.

 Ex:--------------
 $('p').wrapAll('<div></div>');
 $('p').wrapInner('<i></i>');



 SUPPRIMER DES ELEMENTS
 --------------------------------------
 remove() permet de supprimer les éléments retournés par un sélecteur jQuery

 Ex:-----------
 $('h2').remove(); supprimer tous les titres <h2>
 $('li:nth-child(2)').remove(); supprimer la troisième puce dans l'unique liste à puces
 $('p').remove(':contains("quelconque")'); supprimer tous les paragraphes qui contiennent le mot « quelconque »


 HOVER
 ---------------
 $('a').hover(
     function() {

     },
     function() {
     }
 );


 ================================================
 PARTIE 3 :  ALLEZ PLUS LOINS AVEC JQUERY
 ================================================

LA BASE DE GESTION EVENEMENTIELLE
------------------------------------------
$(sel).mge(function() {
    // Une ou plusieurs instructions jQuery
    // pour gérer l'événement lorsqu'il se produit
}

… où sel est un sélecteur jQuery comme ceux que vous avez rencontrés jusqu'ici et mge est une méthode de gestion
événementielle comme celles que vous rencontrerez tout au long de ce chapitre.

LA SOURIS=================
--------------------------

click() = Clic gauche
dbclick() = Double-clic
mousedown() = Appui sur le bouton gauche ou droit de la souris alors que le pointeur est au-dessus de l'élément
mouseenter() ou mouseover() = Début de survol de l'élément
mouseleave() ou mouseout() = Arrêt de survol de l'élément
mousemove() = Déplacement du pointeur au-dessus de l'élément
mouseup() = Relâchement du bouton gauche ou droit alors que le pointeur est au-dessus de l'élément
scroll() = Utilisation de la roulette alors que le pointeur se trouve au-dessus d'un élément concerné par ce type d'événement


Clics et positions de la souris
-------------------------------------

La méthode scroll
---------------------
$(sel).scroll();


Which et Type
--------------
event.which = Pour savoir quel bouton de la souris qui a été utilisé

Il est utiliser en combinaison des evenement suivant :
click, dblclick, mousedown, mouseenter, mouseover, mouseleave, mouseout, mousemove ou mouseup.


LA CLAVIER ===============
--------------------------
keydown() = Appui sur une touche du clavier
keyup() = Relâchement d'une touche du clavier préalablement enfoncée
keypress() = Maintien d'une touche du clavier enfoncée

event.which = Pour savoir quel touche a été appuyée par l'utilisateur


LES ELEMENTS =============
--------------------------
focus() = Réception de focus par l'élément
blur() = Perte de focus par l'élément
focusin() = Réception de focus par l'élément ou un de ses enfants
focusout() = Perte de focus par l'élément ou un de ses enfants
resize() = Redimensionnement d'un élément
change() = Modification d'un élément



LES PAGES =============
--------------------------
load() = permet de tester le complet chargement d'une page, en incluant les textes, images et autres objets qui la composent
unload(), elle est déclenchée lorsque l'internaute a demandé un changement de page

La méthode unload() est toujours appliquée à l'élément window, c'est-à-dire à la fenêtre du navigateur. Par contre, la
méthode load() peut être appliquée à un autre élément auquel est associé une URL : une balise <img>, <script>,
<frame> ou <iframe>. Dans ce cas, le code associé à cette méthode est exécuté lorsque l'élément correspondant et ses
enfants (s'ils existent) sont entièrement chargés.



EVENEMENTS PERSONNALISES
------------------------------------------
$(sel).click(function() {…})  =>  $(sel).on('click', function() {…})
$(sel).scroll(function() {…})  =>  $(sel).on('scroll', function() {…})
$(sel).keydown(function() {…})  =>  $(sel).on('keydown', function(){…})
$(sel).focus(function() {…})  =>  $(sel).on('focus', function() {…})
$(sel).load(function() {…})  =>  $(sel).on('load', function() {…})

...sel représente un sélecteur jQuery quelconque.


Comme nous allons le voir, la méthode on() a plusieurs avantages. Elle permet de :
 - Limiter l'écriture en associant une même méthode événementielle à plusieurs éléments ;
 - Relier plusieurs méthodes événementielles à un élément en une seule instruction ;
 - Désactiver une méthode événementielle précédemment attachée avec la méthode on() ;
 - Relier plusieurs méthodes événementielles entre elles. Par la suite, vous pourrez toutes les déclencher, ou toutes les
désactiver en une seule instruction jQuery.



UNE METHODE POUR GERER PLUSIEURS EVENEMENTS ========
----------------------------------------------------

...avant (Methode traditionnelle)
$('img').mouseenter(function() { … }
$('img').mousemove(function() { … }

...apres (Methode avec on)
$('img').on('mouseenter mousemove', function() { … })

---

...avant (Methode traditionnelle)
$('img.grand').mouseenter(traitement1);
$('img.grand').mousemove(traitement2);

...apres (Methode avec on)
$('img.grand').on({mouseenter:traitement1, mousemove:traitement2});



ETIQUETER PLUSIEURS METHODES EVENEMENTIELLES ===
-----------------------------------------------------
Pour eviter les conflits avec d'autres extensions jquery il faut proceder de la facon suivante

1.---
function actions() {
// Insérer les instructions de traitement appropriées
}
$('img').mouseenter(actions);
$('img').on('mouseenter', actions);
$('img').off('mouseenter', actions);

2.Definir un namespace
$('img').on('mouseenter.depanPC', function() { //traitement });
$('img').on('mouseleave.depanPC', function() { //traitement });
$('img').on('mousemove.depanPC', function() { //traitement });
$('img').off('mouseleave.depanPC');


supprimer plusieurs méthodes événementielles liées à un espace de noms en une seule
instruction...
$('img').off('mouseenter.depanPC mouseleave.depanPC');

supprimer toutes les méthodes événementielles rattachées à l'espace de noms...
$('img').off('.depanPC');

supprimer les méthodes événementielles liées à plusieurs espaces de noms en une seule instruction...
$('img').off('click.depanPC.depanMAC');

pour supprimer des espaces de noms « depanPC » et « depanMAC » de toutes les méthodes événementielles
appliquées aux balises <a>...
$('a').off('.depanPC.depanMAC');


GESTION D'UN EVENEMENT UNIQUE ====
----------------------------------
one() = Permet de gérer un évenement une seule fois, la premiere fois qu'il se produit


DECLENCHEMENT D4UN EVENEMENT =====
----------------------------------
$(sel).trigger('ev');

… où sel est un sélecteur jQuery quelconque et ev est l'événement à déclencher.

Seuls les événements suivants sont déclenchables : blur, change, click, dblclick, error, focus,
keydown, keypress, keyup, select et submit. Par contre, les événements suivants ne sont pas
déclenchables : load, mousedown, mouseout, mouseover, mousemove, mouseup, resize et unload.

$(sel).trigger('ev', ['param1', 'param2', 'param3', 'etc.']);

… où :
 - sel est un sélecteur jQuery quelconque ;
 - ev est l'événement à simuler ;
 - param1, param2, param3 et les suivants s'ils existent sont les paramètres à passer à la méthode événementielle
déclenchée par la méthode trigger().


CREER UN EVENEMENT PERSONNALISE =====
-------------------------------------
$('#bonjour').on('bonjour_jquery', function() {
    alert('jQuery vous dit bonjour !');
});
$('#bonjour').trigger('bonjour_jquery');

...evenement personnalisé 'bonjour_query' qui est appelé avec la methode trigger()


DELEGATION D'EVENEMENTS ====
----------------------------
$('#del').on('ev', 'sel', function () {
    //Une ou plusieurs instructions
});

… où :
 - del est l'élément dont on souhaite cloner le ou les gestionnaires d'événements ;
 - ev est le nom de l'événement concerné ;
 - sel est un sélecteur qui agit comme un filtre ;
 - function() est la fonction à exécuter lorsque l'événement ev est détecté.


$('#del').off('ev', 'sel') = Pour supprimer une délégation d'événements
… où
 - del est l'élément à partir duquel le ou les gestionnaires d'événements ont été clonés ;
 - ev est le nom de l'événement concerné ;
 - sel est un sélecteur qui agit comme un filtre.

La délégation d'événements apporte un avantage indéniable : elle permet de réduire dans de larges proportions le nombre de gestionnaires d'événements définis dans le code.


==========================
ANIMATIONS ET EFFETS
==========================

APPARITION ET DISPARITION
--------------------------------------
slow = 600 ms
fast = 200 ms

Si les valeurs prédéfinies fast et slow ne vous suffisent pas, vous pouvez les redéfinir, voire même en ajouter d'autres. Vous
agirez pour cela sur l'objet jQuery.fx.speeds.

jQuery.fx.speeds.slow = 1500; = Redefinir
jQuery.fx.speeds['super-slow'] = 3000; = Ajouter

Ces valeurs pourront être utilisées dans les méthodes show() et hide(), mais également dans les méthodes fadeIn(),
fadeOut(), fadeTo(), slideDown(), slideUp(), slideToggle() et animate()


ANIMATION AVEC MODELE DE PROGRESSION
----------------------------------------
(swing)
(linear)

Ex:--
show('slow','linear');
hide(1000,'swing');


APPARITION / DISPARITION  EN CASCADE
----------------------------------------
next()
first()

Ex:___
$('img').hide('slow', function message() {
    alert('Les images sont maintenant cachées');
});


FONDU ANCHAINE
------------------------
$('sel').fadeIn();
$('sel').fadeOut();

...indiquer le temps de l'animation en millisecondes
$('sel').fadeIn('fast');
$('sel').fadeOut('slow');
$('sel').fadeOut(2000);

...choisir un modèle de progression de l'animation
$('sel').fadeIn(1200,'linear');
$('sel').fadeOut(1000,'swing');

Les méthodes fadeIn() et fadeOut() sont complémentaires des méthodes hide() et show(). Elles agissent toutes deux
progressivement sur l'opacité d'un élément.


MODIFICATION DE L'OPPACITE
------------------------------
fadeTo() = modifier progressivement l'opacité d'un élément sans aller jusqu'à sa disparition ou sa complète opacité, vous utiliserez la méthode

$('sel').fadeTo(durée, opacité);

… où :
    - sel est un sélecteur jQuery ;
    - durée est la durée de l'animation. Indiquez un entier qui représente une durée en millisecondes ou une chaîne (fast,
    normal ou slow pour fixer la durée à 200, 400 ou 600 millisecondes) ;
    - opacité est un nombre décimal compris entre 0 (transparent) et 1 (opaque).

Définir une fonction de rappel, qui sera appelée à la fin de l'animation
$('sel').fadeTo(durée, opacité, function() {
    // Une ou plusieurs instructions
});


Ex:___
$('#semiT').fadeTo(3000, 0.4);


UN DIAPORAMA EN DEUX INSCTRUCTIONS
--------------------------------------
$('img').first().fadeOut(2000, function suivante() {
    $(this).next('img').fadeOut(2000,suivante);
});


DEPLIER / REPLIER DES ELEMENTS
------------------------------------
slideDown() = augmente la hauteur et la largeur de la sélection jusqu'à atteindre la dimension « native » de chaque élément ;
slideUp() = diminue la hauteur et la largeur de la sélection jusqu'à ce qu'elle disparaisse ;
slideToggle() = inverse l'animation : si les objets sélectionnés ont une taille nulle, leur hauteur et leur largeur sont
                augmentées jusqu'à ce qu'ils atteignent leur dimension. Par contre, s'ils ont une taille non nulle, leur hauteur et leur
                largeur sont diminuées jusqu'à ce qu'ils disparaissent.


DESACTIVER LES ANIMATIONS
------------------------------
jQuery.fx.off = true;


$('.stopAnim').click(function() {
    jQuery.fx.off = true;
});
$('.execAnim').click(function() {
    jQuery.fx.off = false;
});


DEFINIR UN DELAI AVANT ANIMATION
--------------------------------------
delay() =  delai en miliseconde

$(sel).fadeIn('slow').delay(2000).fadeOut('slow');


DEFINIR UNE ANIMATION PERSONNALISEE
------------------------------------------
animate()

Première syntaxe-----
---------------------

$('sel').animate({ prop1: val1, prop2: val2, prop3: val3, etc. }, durée, modèle, function() {
    //Une ou plusieurs instructions
});

… où :
    - sel est un sélecteur jQuery.
    - prop1, prop2 et prop3 sont des propriétés CSS et val1, val2 et val3 les valeurs associées. Une valeur
        numérique sera interprétée comme un nombre de pixels. Une valeur du type « +=50 » demandera d'ajouter
        progressivement 50 pixels à la propriété. Inversement, la valeur « -=50 » demandera de soustraire progressivement 50
        pixels à la propriété. Vous pouvez également utiliser les chaînes show, hide et toggle pour respectivement afficher,
        dissimuler et inverser la propriété.
    - durée est la durée de l'animation (entier en millisecondes ou chaîne fast, normal ou slow).
    - modèle est le modèle de progression de l'animation (swing, linear ou un modèle issu d'un plugin).
    - function() contient une ou plusieurs instructions qui seront exécutées lorsque l'animation sera terminée.


Deuxième syntaxe-----
---------------------
$('sel').animate({ prop1: val1, prop2: val2, prop3: val3, etc. },
{options});

… où :
    - sel est un sélecteur jQuery ;
    - prop1, prop2 et prop3 sont des propriétés CSS et val1, val2 et val3 les valeurs associées ;
    - options est un objet qui peut contenir une ou plusieurs des propriétés suivantes :
        - duration : durée de l'animation (entier en millisecondes ou chaîne fast, normal ou slow) ;
        - easing : modèle de progression de l'animation (swing, linear ou un modèle issu d'un plugin) ;
        - complete : fonction appelée lorsque l'animation est terminée ;
        - step : fonction appelée à chaque étape de l'animation ;
        - queue : valeur booléenne qui indique si l'animation doit (true) ou ne doit pas (false) être placée dans une file
                    d'attente réservée aux animations. Si la valeur false est attribuée à cette propriété, l'animation démarre
                    immédiatement. Dans le cas contraire, elle est en attente de déclenchement.
        - specialEasing : un ou plusieurs couples propriétés CSS/modèle de progression.



==========================
FILE D'ATTENTE ET TIMER
==========================



LES FILES D'ATTENTE JQUERY
---------------------------------
$('sel').animate(…).animate(…);

… alors la deuxième animation commence quand la première est terminée.
les animations sont placées dans une file d'attente et s'enchaînent, les unes à la suite des autres


Si vous souhaitez que plusieurs animations s'exécutent en même temps, il suffit d'indiquer les
propriétés CSS à modifier dans le premier argument de la méthode animate()

$('sel').animate({ prop1: val1, prop2: val2, } …);


Si vous voulez exécuter plusieurs animations en
même temps, chacune ayant une vitesse d'exécution qui lui est propre, vous devez utiliser une technique particulière, basée sur
l'utilisation de la propriété queue dans la deuxième syntaxe de la méthode animate()

$('sel').animate({ prop1: val1, prop2: val2, prop3: val3, etc. }, {queue: …});


État de la file d'attente
----------------------------------
var resultat = $('#monElement').queue();
resultat.length


Manipuler la file d'attente
-----------------------------------
queue() = ajoute une animation dans la file d'attente ;
dequeue() = joue puis supprime une animation de la file d'attente ;
clearQueue() = vide la file d'attente.


Répéter une action
-----------------------------------

function bis() {
    $('#balle').animate({left: '+=200'}, 'slow')
                .animate({top: '+=200'}, 'slow')
                .animate({left: '-=200'}, 'slow')
                .animate({top: '-=200'}, 'slow', bis);
    };
bis();


Arrêter et reprendre une animation
--------------------------------------
$('sel').stop(efface, fin);

… où :
    - sel est un sélecteur jQuery ;
    - efface est une valeur booléenne qui indique si les animations en attente d'exécution doivent être (true) ou non
        (false) supprimées de la file d'attente ;
    - fin est une valeur booléenne qui indique si l'animation doit prendre son état final (true) ou non (false). Si ce
        paramètre n'est pas spécifié, l'animation reste dans l'état où elle se trouvait au moment de son arrêt.


Mettre en place un timer
-------------------------------
setInterval()

function nom() {
    // Une ou plusieurs instructions JavaScript et/ou jQuery
}setInterval(nom, période);

… où :
    - nom est le nom de la fonction qui doit être exécutée périodiquement ;
    - durée est la période (c'est-à-dire le temps) entre deux exécutions consécutives des instructions contenues dans la
        fonction.


Une horloge élémentaire
--------------------------
setInterval()


Une animation sans fin
--------------------------


============================
TEXTE ET IMAGES
============================

LES CHAINES DE CARACTERES
---------------------------------

Supprimer des espaces dans une chaine
----------------------------------------
$.trim() = supprime les espaces au début et à la fin d'une chaîne


Position d'un caractère dans une chaîne
-----------------------------------------
var unCaractere = chaine.charAt(position);

… où chaine est une chaîne de caractères, position est la position du caractère à extraire (attention, le premier caractère
occupe la position 0, le deuxième la position 1, etc.) et unCaractere est la variable dans laquelle est stocké le caractère extrait.


Recherches et remplacements de textes
-------------------------------------------
$('div:contains("rouge")') = pour sélectionner toutes les balises <div> qui contiennent le mot « rouge »

Ex:___
$('div:contains("rouge")').css('background-color', 'red');
modifier la couleur d'arrière-plan des <div> qui contiennent le mot « rouge »


$('sel').replaceWith('contenu')
… où sel est un sélecteur jQuery et contenu une chaîne HTML, un élément du DOM ou un objet jQuery qui remplacera le ou
                                  les éléments sélectionnés

NB:
replaceWith() remplace sans supprimer si on lui fournit du code HTML. Par contre, il supprime et remplace si on
lui fournit un sélecteur jQuery.



LES IMAGES
------------------

Réagir au survol d'une image
--------------------------------------

...Agrandissement au survol
Ex:__
$('#montagne').mouseover(function() {
    $(this).attr('src','montagne.jpg');
});
$('#montagne').mouseout(function() {
    $(this).attr('src','montagnepetit.jpg');
});



...Agrandissement avec animation au survol



...Galerie d'images



...Diaporama automatique



=================================
FORMULAIRE ET TABLEAUX
=================================



----------------------
=====   AJAX    ======
----------------------


CHARGER UN FICHIER
-------------------
$('sel').load('nom_page', function() {
  //une ou plusieurs instructions
});

… où :
    - sel est un sélecteur jQuery quelconque qui permet d'identifier l'élément (ou les éléments) à mettre à jour ;
    - nom_page est le nom d'une page Web quelconque dont le contenu sera utilisé pour effectuer la mise à jour ;
    - Si elle est précisée, la fonction de rappel est, comme toujours, exécutée lorsque la méthode a été exécutée,
    c'est-à-dire lorsque l'élément (ou les éléments) a (ont) été mis à jour.


CHARGER UNE PARTIE D'UN FICHIER
-------------------------------
$('sel').load('nom_page sel2', function() {
  //Une ou plusieurs instructions
});

… où :
    - sel est un sélecteur jQuery quelconque qui permet d'identifier l'élément (ou les éléments) à mettre à jour ;
    - nom_page est le nom d'une page Web quelconque dont le contenu sera utilisé pour effectuer la mise à jour ;
    - sel2 est un sélecteur jQuery quelconque, sans le signe $ ni les parenthèses, qui permettra d'isoler certaines données dans la pagenom_page;
    - Si elle est précisée, la fonction de rappel est, comme toujours, exécutée lorsque la méthode a été exécutée, c'est-à-dire lorsque l'élément (ou les éléments) a (ont) été mis à jour.

Ex__
$('#deuxieme').load('maj.html #modif2', function() {

});


PASSER DES PARAMETRES A UN PROGRAMME PHP
----------------------------------------
$('sel').load(url,param);

… où :
    - sel est un sélecteur jQuery quelconque qui permet d'identifier l'élément (ou les éléments) à mettre à jour ;
    - url est le nom de la page PHP qui sera utilisée pour faire la mise à jour ;
    - param est une chaîne qui contient un ou plusieurs couples paramètres/valeurs. Par exemple, siparamvaut « id=5, p=14 » eturlvauthttp://site.fr/page.php, la page utilisée pour la mise à jour serahttp://site.fr/page.php?id=5&p=14

Ex__
$('#action').click(function() {
    var param = 'l=' + $('#ref').val();
    $('#r').load('http://www.proverbes.php',param);
});


Deuxième forme de la méthode load()__________________________________
$('sel').load('http://www.site.com/page.php',{ id:50, nom:'durand'});

NB: Attention, dans ce cas, les valeurs sont passées par une requête HTTP POST. Elles devront donc être récupérées de la
sorte par le programme PHP.


Requêtes GET et POST
===============================

La fonction $.get()
-------------------
$.get(adresse, données, function() {
    // Une ou plusieurs instructions
});

… où :
    - adresse est le nom d'une page Web quelconque dont le contenu sera récupéré par la fonction get() ;
    - données représente les données à passer à la page Web par une requête HTTP GET ;
    - Si elle est précisée, la fonction de rappel est, comme toujours, exécutée lorsque la méthode a été exécutée, c'est-à-dire
lorsque l'élément (ou les éléments) a (ont) été mis à jour.


La fonction$.post()
-------------------

Ex_
$.post('traiteFormulaire.php', { nom: 'Pierre34', heure: '2pm', post: 'Un peu de texte récupéré dans un formulaire HTML et destiné à être posté dans un forum.' },
function(data) {
 alert(data);
});

Ici, le programme traite Formulaire.php est exécuté. Les données saisies dans le formulaire
lui sont transmises, et les éléments affichés par le programme PHP sont affichés dans une
boîte de message.

charger et exécuter un script JavaScript avec la fonction $.getScript()
et des données JSON avec la fonctionet des données JSON avec la fonction $.getJSON()

FAIRE PATIENTER LES UTILISATEURS AVEC UNE ANIMATION
---------------------------------------------------

===========================
PLUS LOIN AVEC JAVASCRIPT
===========================
===========================
Dans $('sélecteur').meth(paramètres);, meth est une méthode, alors que
dans $.fonc(paramètres);, fonc est une fonction


CHARGER UN SCRIPT ET DES DONNEES JSON
=====================================

Charger un script
-----------------
$.getScript() = permet de charger (de façon asynchrone) puis d'exécuter un fichier JavaScript.
                Dans sa syntaxe la plus simple, il suffit de préciser l'adresse URL du fichier à charger

$.getScript('adresse');

$.getScript('adresse', function() {
  // Une ou plusieurs instructions
});
Une fonction de retour est précisée en deuxième paramètre de la fonction.
Cette fonction est exécutée lorsque le code JavaScript a été chargé et exécuté


Charger des données codées en JSON
----------------------------------
$.getJSON() = Permet de charger des fichiers de données JSON

$.ajax
------
$.ajax(adresse, {options});
$.ajax({options});

… où adresse est l'adresse à laquelle la requête doit être envoyée, et options correspond à
une ou plusieurs des options suivantes :
    - type : type de la requête, GET ou POST (GET par défaut).
    - url : adresse à laquelle la requête doit être envoyée.
    - data : données à envoyer au serveur.
    - dataType : type des données qui doivent être retournées par le serveur : xml, html,
    script, json, text.
    - success : fonction à appeler si la requête aboutit.
    - error : fonction à appeler si la requête n'aboutit pas.
    - timeout : délai maximum (en millisecondes) pour que la requête soit exécutée.
    Si ce délai est dépassé, la fonction spécifiée dans le paramètre error sera exécutée.


EVENEMENT ASSOCIER A UNE REQUETE AJAX
-------------------------------------
exécuter du code à différentes étapes de l'exécution d'une requête AJAX

$(document).ajaxSend(function(ev, req, options)) => Requête sur le point d'être envoyée
$(document).ajaxStart(function()) => Début d'exécution de la requête
$(document).ajaxStop(function()) => Fin de la requête
$(document).ajaxSuccess(function(ev, req, options)) => La requête a abouti
$(document).ajaxComplete(function(ev, req, options)) => La requête est terminée
$(document).ajaxError(function(ev, req, options, erreur)) => La requête n'a pas abouti

… où :
    - ev représente l'événement ;
    - req représente la requête ;
    - options contient les paramètres passés à la requête ;
    - erreur est le nom de l'erreur détectée par jQuery.


========================
JQUERY UI
========================
...rendre tous element deplacable
.$(function() {
   $('img,div').draggable();
});

...Rendre tout element redimentionnable
$(function() {
    $("#redim").resizable();
});

...Accordeon
$(document).ready(function() {
    $("#accordeon").accordion();
});

...Selctionner la date
$( "#datepicker").datepicker();

...Des boites de dialogue
$('sel').dialog();

$('sel').dialog({ autoOpen: false; }); //Crée une instance de la boîte de dialogue sans l'ouvrir
$('sel').dialog('open'); // Ouvre la boîte de dialogue
$('sel').dialog('close'); // Ferme la boîte de dialogue


height et width => Hauteur et largeur de la boîte de dialogue à l'ouverture.
modal => Initialisé àtrue, rend la boîte de dialogue modale (c'est-à-dire interdit l'accès à la page). La valeur par défaut estfalse.
position => Position de la boîte de dialogue sur la page (elle est centrée par défaut).
zindex => Z-index de la boîte de dialogue (1000 par défaut).
buttons => Un ou plusieurs boutons affichés dans la boîte de dialogue.


...Onglets
$(function() {
    $('#onglets').tabs();
});


...Animation
show(effet, options, vitesse, retour);
hide(effet, options, vitesse, retour);
toggle(effet, options, vitesse, retour);

… où :
    - effet => est l'un des effets suivants :blind,clip,drop,explode,fold,puff,slide,scale,sizeetpulsate.
    - options => représente les options à appliquer à l'effet. Ce paramètre est optionnel.
    - vitesse => est la vitesse d'exécution de l'effet :slow,normal(valeur par défaut équivalente à 400 ms),
    fastou un nombre qui représente une durée en millisecondes. Ce paramètre est optionnel.
    - retour est une fonction de retour, exécutée lorsque l'effet est terminé. Ce paramètre
    est optionnel.


Animation successive
--------------------
$('sel').animate({ prop1: val1, prop2: val2, prop3: val3, etc. }, durée, modèle, function() {
  //Une ou plusieurs instructions
});

… où :
    - sel => est un sélecteur jQuery ;
    - prop1,prop2,prop3 => sont des propriétés CSS etval1,val2,val3les valeurs associées ;
    - durée => est la durée de l'animation ;
    - modèle => est le modèle de progression de l'animation ;
    - function()=> contient une ou plusieurs instructions qui seront exécutées lorsque l'animation sera terminée.

DEBOGUER UN CODE
----------------
alert()


var message='';
try
{
  alort('un message');
}
catch(err)
{
  message='Une erreur s\'est produite.\n\n';
  message+='Description : ' + err.message + '\n\n';
  message+='Cliquez sur OK pour poursuivre.';
  alert(message)
}


Capturer toutes les erreurs
---------------------------
function gestionErreurs(err)
{
  alert('Erreur : \n' + err);
  return true;
}
window.onerror = gestionErreurs;


window.console.log('y = ' + y);














