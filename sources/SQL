Ordre des parametres dans une requete
============================================
SELECT *
FROM table
WHERE condition
GROUP BY expression
HAVING condition
{ UNION | INTERSECT | EXCEPT }
ORDER BY expression
LIMIT count
OFFSET start



Selectionner les champs (sans doublon)
=============================================================
SELECT DISTINCT ma_colonne
FROM nom_du_tableau


Alias (AS)
================

*-Sur une colonne
SELECT colonne1 AS c1, colonne2
FROM `table`

ou

SELECT colonne1 c1, colonne2
FROM `table`

*-Sur une table
SELECT *
FROM `nom_table` AS t1

ou

SELECT *
FROM `table` t1

LES OPERATEURS DE COMPARAISON
======================================
=           égal
<>          Pas égal
!=          Pas égal
>           Supérieur à
<           Inférieur à
>=          Supérieur ou égal à
<=          Inférieur ou égal à
IN          Liste de plusieurs valeurs possibles
BETWEEN     Valeur comprise dans un intervalle donné (utile pour les nombres ou dates)
LIKE        Recherche en spécifiant le début, milieu ou fin d'un mot.
IS NULL     Valeur est nulle
IS NOT NULL Valeur n'est pas nulle

IN
====
SELECT nom_colonne
FROM table
WHERE nom_colonne IN ( valeur1, valeur2, valeur3, ... )

BETWEEN
===========
SELECT *
FROM table
WHERE nom_colonne BETWEEN 'valeur1' AND 'valeur2'

SELECT *
FROM utilisateur
WHERE id NOT BETWEEN 4 AND 10

LIKE
========
%   n'importe quel caractère (Plusieurs)
_   undescore - n'importe quel caractère (un)

IS NULL / IS NOT NULL
==========================
SELECT *
FROM `table`
WHERE nom_colonne IS NULL


SELECT *
FROM `table`
WHERE nom_colonne IS NOT NULL

GROUP BY
=================
SELECT client, SUM(tarif)
FROM achat
GROUP BY client

====================================
LES FONCTIONS DE STATISTIQUE
====================================
 * AVG() pour calculer la moyenne d’un set de valeur.
 * COUNT() pour compter le nombre de lignes concernées.
 * MAX() pour récupérer la plus haute valeur.
 * MIN() pour récupérer la plus petite valeur.
 * SUM() pour calculer la somme de plusieurs lignes.


HAVING
================
Equivaut à where mais fonctionne avec des fonction de statistiques

SELECT colonne1, SUM(colonne2)
FROM nom_table
GROUP BY colonne1
HAVING fonction(colonne2) operateur valeur

Souvent utilisé en même temps que GROUP BY bien que ce ne soit pas obligatoire

LIMIT
==========
Cette clause est souvent associée à un OFFSET, c’est-à-dire effectuer un décalage
    sur le jeu de résultat

la bonne pratique lorsque l’on utilise LIMIT consiste à utiliser également la clause
ORDER BY pour s’assurer que quoi qu’il en soit ce sont toujours les bonnes données
qui sont présentées

SELECT *
FROM table
LIMIT 10 OFFSET 5

ou

SELECT *
FROM table
LIMIT 5, 10;


CASE ... WHEN
=====================
Equivalent de if/else

L’utilisation du CASE est possible de 2 manières différentes :
1* Comparer une colonne à un set de résultat possible
2* élaborer une série de conditions booléennes pour déterminer un résultat

Cas *1:
----------
CASE a
  WHEN 1 THEN 'un'
  WHEN 2 THEN 'deux'
  WHEN 3 THEN 'trois'
  ELSE 'autre'
END

Cas *2:
----------
CASE
  WHEN a=b THEN 'A égal à B'
  WHEN a>b THEN 'A supérieur à B'
  ELSE 'A inférieur à B'
END

Exemples:
-----------
SELECT id, nom, marge_pourcentage, prix_unitaire, quantite,
CASE
  WHEN marge_pourcentage=1 THEN 'Prix ordinaire'
  WHEN marge_pourcentage>1 THEN 'Prix supérieur à la normale'
  ELSE 'Prix inférieur à la normale'
END
FROM `achat`

SELECT id, nom, marge_pourcentage, prix_unitaire, quantite,
CASE
  WHEN marge_pourcentage=1 THEN prix_unitaire
  WHEN marge_pourcentage>1 THEN prix_unitaire*2
  ELSE prix_unitaire/2
END
FROM `achat

SELECT id, nom, marge_pourcentage, prix_unitaire, quantite,
  CASE quantite
    WHEN 0 THEN 'Erreur'
    WHEN 1 THEN 'Offre de -5% pour le prochain achat'
    WHEN 2 THEN 'Offre de -6% pour le prochain achat'
    WHEN 3 THEN 'Offre de -8% pour le prochain achat'
    ELSE 'Offre de -10% pour le prochain achat'
  END
FROM `achat`

UPDATE avec CASE
====================
UPDATE `achat`
SET `quantite` = (
  CASE
    WHEN `surcharge` < 1 THEN `quantite` + 1
    WHEN `surcharge` > 1 THEN `quantite` - 1
    ELSE quantite
  END
)

UNION
============
Pour l’utiliser il est nécessaire que chacune des requêtes à concaténer retourne le même
nombre de colonnes, avec les mêmes types de données et dans le même ordre.

L’union de 2 ensembles A et B est un concept qui consiste à obtenir tous les éléments qui
correspondent à la fois à l’ensemble A ou à l’ensemble B.

Imaginons une entreprise qui possède plusieurs magasins et dans chacun de ces magasins
il y a une table qui liste les clients. Sachant que certains clients sont présents dans
les 2 tables, pour éviter de retourner plusieurs fois les mêmes enregistrements, il convient
d’utiliser la requête UNION

SELECT * FROM table1
UNION
SELECT * FROM table2

* UNION ALL     Pour effectuer une union dans laquelle même les lignes dupliquées sont affichées.
SELECT * FROM table1
UNION ALL
SELECT * FROM table2


INTERSECT
======================
* permet d’obtenir l’intersection des résultats de 2 requêtes
* permet donc de récupérer les enregistrements communs à 2 requêtes
* Cela peut s’avérer utile lorsqu’il faut trouver s’il y a des données
similaires sur 2 tables distinctes.

SELECT * FROM table1
INTERSECT
SELECT * FROM table2

EXCEPT / MINUS
===================
* s’utilise entre 2 instructions pour récupérer les enregistrements de la
première instruction sans inclure les résultats de la seconde requête.
* cette commande s’appelle différemment selon les Systèmes de Gestion de Base de Données (SGBD) :
  EXCEPT : PostgreSQL
  MINUS : MySQL et Oracle

SELECT * FROM table1
EXCEPT
SELECT * FROM table2

* Cette requête permet de lister les résultats du table 1 sans inclure les enregistrements
de la table 1 qui sont aussi dans la table 2.

ATT : les colonnes de la première requête doivent être similaires entre la première et
la deuxième requête (même nombre, même type et même ordre).

Ex:
Pour pouvoir sélectionner uniquement le prénom et le nom des utilisateurs qui
acceptent de recevoir des emails informatifs. La requête SQL à utiliser est la suivante :
SELECT prenom, nom FROM clients_inscrits
EXCEPT
SELECT prenom, nom FROM clients_refus_email

Insertion de plusieurs lignes à la fois
==============================================
INSERT INTO client (prenom, nom, ville, age)
VALUES
('Rébecca', 'Armand', 'Saint-Didier-des-Bois', 24),
('Aimée', 'Hebert', 'Marigny-le-Châtel', 36),
('Marielle', 'Ribeiro', 'Maillères', 27),
('Hilaire', 'Savary', 'Conie-Molitard', 58);

ON DUPLICATE KEY UPDATE
============================
* est une fonctionnalité de MySQL qui permet de mettre à jour des données lorsqu’un
enregistrement existe déjà dans une table. Cela permet de n’avoir qu’une seule
requête SQL pour effectuer selon la convenance un INSERT ou un UPDATE.

INSERT INTO table (a, b, c)
VALUES (1, 20, 68)
ON DUPLICATE KEY UPDATE a=a+1

1* insérer les données a, b et c avec les données respectives de 1, 20 et 68
2* Si la clé primaire existe déjà pour ces valeurs alors seulement faire une mise à jour de a = a+1

INSERT INTO table (a, b, c, date_insert)
VALUES (1, 20, 1, NOW())
ON DUPLICATE KEY UPDATE date_update=NOW
WHERE c=1

1* insérer les données a, b, c et date_insert, avec les données respectives
    de 1, 20, 1 ainsi que la date et l’heure actuelle
2* Si la clé primaire existe déjà pour ces valeurs alors mettre à jour la date
    et l’heure du champ « date_update »
3* Effectuer la mise à jour uniquement sur les champs où c = 1

INSERT INTO vote (produit_id, vote_count, vote_first_date, vote_last_date)
VALUES (50, 1, NOW(), NOW())
ON DUPLICATE KEY UPDATE vote_count = vote_count+1, vote_last_date = NOW()

Insérer une ligne ou ne rien faire
-----------------------------------
INSERT INTO table (a, b,c)
VALUES (1, 45, 6)
ON DUPLICATE KEY UPDATE id = id

TRUNCATE
===============
* permet de supprimer toutes les données d’une table sans supprimer la table en elle-même.

TRUNCATE TABLE `table`

CREATE DATABASE
=====================
CREATE DATABASE IF NOT EXISTS ma_base
CREATE DATABASE ma_base

DROP DATABASE
==================
* permet de supprimer tout ce qui est inclus dans une base: les tables, les données, les index …

DROP DATABASE ma_base
DROP DATABASE IF EXISTS ma_base

CREATE TABLE
===============
CREATE TABLE utilisateur
(
  id INT PRIMARY KEY NOT NULL,
  nom VARCHAR(100),
  prenom VARCHAR(100),
  email VARCHAR(255),
  date_naissance DATE,
  pays VARCHAR(255),
  ville VARCHAR(255),
  code_postal VARCHAR(5),
  nombre_achat INT
)


ALTER TABLE
=================
* permet de modifier une table existante

ALTER TABLE nom_table
instruction

ALTER TABLE nom_table
ADD nom_colonne type_donnees

ALTER TABLE utilisateur
ADD adresse_rue VARCHAR(255)

/*Supprimer une colonne*/
ALTER TABLE nom_table
DROP COLUMN nom_colonne

/*Modifier une colonne*/
ALTER TABLE nom_table
MODIFY nom_colonne type_donnees

/*Renommer une colonne*/
ALTER TABLE nom_table
CHANGE colonne_ancien_nom colonne_nouveau_nom type_donnees

ALTER TABLE `articles` CHANGE `utilisateur_id` `utilisateurs_id` INT(11) NOT NULL;

DROP TABLE
=================
* permet de supprimer définitivement une table d’une base de données.
DROP TABLE nom_table

=====================
Jointure SQL
=====================
* INNER JOIN : jointure interne pour retourner les enregistrements quand la
    condition est vraie dans les 2 tables. C’est l’une des jointures les plus communes.
* CROSS JOIN : jointure croisée permettant de faire le produit cartésien de 2 tables.
    En d’autres mots, permet de joindre chaque ligne d’une table avec chaque ligne d’une
    seconde table. Attention, le nombre de lignes résultant est en général très élevé.
* LEFT JOIN (ou LEFT OUTER JOIN) : jointure externe pour retourner tous les enregistrements
    de la table de gauche (LEFT = gauche) même si la condition n’est pas vérifiée dans
    l’autre table.
* RIGHT JOIN (ou RIGHT OUTER JOIN) : jointure externe pour retourner tous les enregistrements
    de la table de droite (RIGHT = droite) même si la condition n’est pas vérifiée dans
    l’autre table.
* FULL JOIN (ou FULL OUTER JOIN) : jointure externe pour retourner les résultats quand la
    condition est vraie dans au moins une des 2 tables.
* SELF JOIN : permet d’effectuer une jointure d’une table avec elle-même comme si c’était
    une autre table.
* NATURAL JOIN : jointure naturelle entre 2 tables s’il y a au moins une colonne qui
    porte le même nom entre les 2 tables SQL


INNER JOIN
===========================
* retourne les enregistrements lorsqu’il y a au moins une ligne dans chaque
  colonne qui correspond à la condition: la condition est vrai dans les 2 tables..

  SELECT *
  FROM table1
  INNER JOIN table2 ON table1.id = table2.fk_id

  ou

  SELECT *
  FROM table1
  INNER JOIN table2
  WHERE table1.id = table2.fk_id

CROSS JOIN
=======================
* retourner le produit cartésien. chaque ligne d’une table avec chaque ligne d’une autre table.
* produit cartésien d’une table A qui
  contient 30 résultats avec une table B de 40 résultats va produire 1200 résultats (30 x 40 = 1200)
* Attention, le nombre de résultat peut facilement être très élevé. S’il est effectué sur des tables avec
  beaucoup d’enregistrements, cela peut ralentir sensiblement le serveur.

  SELECT *
  FROM table1
  CROSS JOIN table2

  ou

  SELECT *
  FROM table1, table2


LEFT JOIN
=====================
* permet de lister tous les résultats de la table de gauche (left = gauche)
  même s’il n’y a pas de correspondance dans la deuxième tables

  SELECT *
  FROM table1
  LEFT JOIN table2 ON table1.id = table2.fk_id

  ou

  SELECT *
  FROM table1
  LEFT OUTER JOIN table2 ON table1.id = table2.fk_id

RIGHT JOIN
====================
* permet de retourner tous les enregistrements de la table de droite (right = droite) même s’il n’y a
  pas de correspondance avec la table de gauche

  SELECT *
  FROM table1
  RIGHT JOIN table2 ON table1.id = table2.fk_id

  ou

  SELECT *
  FROM table1
  RIGHT OUTER JOIN table2 ON table1.id = table2.fk_id

FULL JOIN
=====================
* permet de combiner les résultats des 2 tables,
  les associer entre eux grâce à une condition et remplir avec des valeurs NULL si la condition n’est
  pas respectée

  SELECT *
  FROM table1
  FULL JOIN table2 ON table1.id = table2.fk_id

  ou

  SELECT *
  FROM table1
  FULL OUTER JOIN table2 ON table1.id = table2.fk_id

SELF JOIN
===================
* correspond à une jointure d’une table avec elle-même.
  très pratique dans le cas où une table lie des informations avec des
  enregistrements de la même table

  SELECT `t1`.`nom_colonne1`, `t1`.`nom_colonne2`, `t2`.`nom_colonne1`,
  `t2`.`nom_colonne2`
  FROM `table` as `t1`
  LEFT OUTER JOIN `table` as `t2` ON `t2`.`fk_id` = `t1`.`id`

NATURAL JOIN
====================
* faire une jointure naturelle entre 2 tables
* Cette jointure s’effectue à la condition qu’il y ai des colonnes du même nom et de même type
  dans les 2 tables
* L’avantage d’un NATURAL JOIN c’est qu’il n’y a pas besoin d’utiliser la clause ON.

  SELECT *
  FROM table1
  NATURAL JOIN table2

SOUS REQUETE
======================

Requête imbriquée qui retourne un seul résultat
--------------------------------------------------
SELECT *
    FROM `table`
    WHERE `nom_colonne` = (
        SELECT `valeur`
        FROM `table2`
        LIMIT 1
    )

Requête imbriquée qui retourne une colonne
--------------------------------------------
* Une requête imbriquée peut également retournée une colonne entière. Dès lors, la requête externe
  peut utiliser la commande IN pour filtrer les lignes qui possèdent une des valeurs retournées par la
  requête interne

  SELECT *
      FROM `table`
      WHERE `nom_colonne` IN (
          SELECT `colonne`
          FROM `table2`
          WHERE `cle_etrangere` = 36
      )

EXISTS
=================
* s’utilise dans une clause conditionnelle pour savoir s’il y
  a une présence ou non de lignes lors de l’utilisation d’une sous-requête
* n’est pas à confondre avec la clause IN. La commande EXISTS vérifie si
  la sous-requête retourne un résultat ou non, tandis que IN vérifie la
  concordance d’une à plusieurs données
* La requête externe s’exécutera
  uniquement si la requête interne retourne au moins un résultat

  SELECT nom_colonne1
  FROM `table1`
  WHERE EXISTS (
      SELECT nom_colonne2
      FROM `table2`
      WHERE nom_colonne3 = 10
  )

ALL
==========
* la commande ALL permet de comparer une valeur dans l’ensemble de valeurs
  d’une sous-requête.
* permet de s’assurer qu’une condition est « égale », « différente », « supérieure »,
  « inférieure », « supérieure ou égale » ou « inférieure ou égale » pour tous les résultats retourné par une sous-requête

  SELECT *
  FROM table1
  WHERE condition > ALL (
      SELECT *
      FROM table2
      WHERE condition2
  )

ANY / SOME
================
* permet de comparer une valeur avec le résultat d’une sous-requête. Il est ainsi
  possible de vérifier si une valeur est « égale », « différente », « supérieur »,
  « supérieur ou égale », « inférieur » ou « inférieur ou égale » pour au moins une des
  valeurs de la sous-requête
* s’utilise dans une clause conditionnelle juste après un opérateur conditionnel et
  juste avant une sous-requête

  SELECT *
  FROM table1
  WHERE condition > ANY (
      SELECT *
      FROM table2
      WHERE condition2
  )

  Cette requête peut se traduire de la façon suivante : sélectionner toutes les colonnes de table1, où la
  condition est supérieure à n’importe quel résultat de la sous-requête.

INDEX
=================
* CREATE INDEX permet de créer un index. L’index est utile pour accélérer
               l’exécution d’une requête SQL qui lit des données et ainsi améliorer les performances d’une
               application utilisant une base de données

 CREATE INDEX `index_nom` ON `table`;

* créer un index sur une seule colonne en précisant la colonne sur
  laquelle doit s’appliquer l’index
 CREATE INDEX `index_nom` ON `table` (`colonne1`);

* insérer un index sur plusieurs colonnes
CREATE INDEX `index_nom` ON `table` (`colonne1`, `colonne2`);

Créer un index unique
--------------------------------
* permet de spécifier qu’une ou plusieurs colonnes doivent contenir des valeurs
  uniques à chaque enregistrement
  CREATE UNIQUE INDEX `index_nom` ON `table` (`colonne1`);

* créer un index d’unicité sur 2 colonnes
  CREATE UNIQUE INDEX `index_nom` ON `table` (`colonne1`, `colonne2`);

Convention de nommage
--------------------------------
• Préfixe « PK_ » pour Primary Key (traduction : clé primaire)
• Préfixe « FK_ » pour Foreign Key (traduction : clé étrangère)
• Préfixe « UK_ » pour Unique Key (traduction : clé unique)
• Préfixe « UX_ » pour Unique Index (traduction : index unique)
• Préfixe « IX_ » pour chaque autre IndeX

EXPLAIN
===========
* permet de savoir de quelle manière le Système de Gestion de Base de Données (SGBD)
  va exécuter la requête et s’il va utiliser des index et lesquels

  EXPLAIN SELECT *
  FROM `user`
  ORDER BY `id` DESC